From 86cb7fd3152713307cd9107fb80a3ae94e221372 Mon Sep 17 00:00:00 2001
From: Daniel Wappner <danielituswapp@gmail.com>
Date: Mon, 22 Sep 2025 16:18:14 -0300
Subject: [PATCH] use remote_kcov to track coverage of console_callback

---
 drivers/tty/vt/vt.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/drivers/tty/vt/vt.c b/drivers/tty/vt/vt.c
index c9ee8e9498d5..5cc873d8d463 100644
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@ -106,6 +106,7 @@
 #include <linux/ctype.h>
 #include <linux/bsearch.h>
 #include <linux/gcd.h>
+#include <linux/kcov.h>
 
 #define MAX_NR_CON_DRIVER 16
 
@@ -190,6 +191,7 @@ core_param(consoleblank, blankinterval, int, 0444);
 
 static DECLARE_WORK(console_work, console_callback);
 static DECLARE_WORK(con_driver_unregister_work, con_driver_unregister_callback);
+int kcov_handle;
 
 /*
  * fg_console is the current virtual console,
@@ -312,6 +314,7 @@ static inline void scrolldelta(int lines)
 	   and still is not protecting versus the scheduled back end */
 	scrollback_delta += lines;
 	schedule_console_callback();
+	kcov_handle = current->kcov_handle;
 }
 
 void schedule_console_callback(void)
@@ -2848,6 +2851,12 @@ static int do_con_write(struct tty_struct *tty, const unsigned char *buf, int co
  */
 static void console_callback(struct work_struct *ignored)
 {
+	bool kcov_remote = kcov_handle == 0;
+	if (kcov_remote){
+		kcov_remote_start(kcov_handle);
+		kcov_handle = 0;
+	}
+
 	console_lock();
 
 	if (want_console >= 0) {
@@ -2879,6 +2888,9 @@ static void console_callback(struct work_struct *ignored)
 	notify_update(vc_cons[fg_console].d);
 
 	console_unlock();
+	if (kcov_remote){
+		kcov_remote_stop();
+	}
 }
 
 int set_console(int nr)
@@ -2900,6 +2912,7 @@ int set_console(int nr)
 	}
 
 	want_console = nr;
+	kcov_handle = current->kcov_handle;
 	schedule_console_callback();
 
 	return 0;
-- 
2.43.0

